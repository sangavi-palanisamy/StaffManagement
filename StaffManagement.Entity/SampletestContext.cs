// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace StaffManagement.Entity
{
    public partial class SampletestContext : DbContext
    {
        public SampletestContext()
        {
        }

        public SampletestContext(DbContextOptions<SampletestContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Staff_Login> Staff_Login { get; set; }
        public virtual DbSet<Student_Mark_Information> Student_Mark_Information { get; set; }
        public virtual DbSet<Student_Personal_Details> Student_Personal_Details { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=SampleTest;Integrated Security=True;Multiple Active Result Sets=True;Application Name=EntityFramework");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Staff_Login>(entity =>
            {
                entity.Property(e => e.Current_time_stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Update_time_stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.UserName).IsUnicode(false);
            });

            modelBuilder.Entity<Student_Mark_Information>(entity =>
            {
                entity.HasKey(e => e.Student_Mark_Id)
                    .HasName("PK_Student_mark_information");

                entity.Property(e => e.Created_time_stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name).IsUnicode(false);

                entity.Property(e => e.Roll_No).IsUnicode(false);

                entity.Property(e => e.Updated_time_stamp).HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Student_Personal_Details>(entity =>
            {
                entity.Property(e => e.Created_time_stamp).HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email_Id).IsUnicode(false);

                entity.Property(e => e.Father_First_Name).IsUnicode(false);

                entity.Property(e => e.Father_Last_Name).IsUnicode(false);

                entity.Property(e => e.Father_Occupation).IsUnicode(false);

                entity.Property(e => e.First_Name).IsUnicode(false);

                entity.Property(e => e.Gender).IsUnicode(false);

                entity.Property(e => e.Last_Name).IsUnicode(false);

                entity.Property(e => e.Mother_First_Name).IsUnicode(false);

                entity.Property(e => e.Mother_Last_Name).IsUnicode(false);

                entity.Property(e => e.Password).IsUnicode(false);

                entity.Property(e => e.Roll_No).IsUnicode(false);

                entity.Property(e => e.Subject).IsUnicode(false);

                entity.Property(e => e.Updated_time_stamp).HasDefaultValueSql("(getdate())");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}